var Transform = require('stream').Transform;
var util = require('util');

exports.parse = JSONSParse;
exports.stringify = JSONSStringify;

var OPEN_BRACE = 0x7b;
var CLOSE_BRACE = 0x7d;
var OPEN_BRACKET = 0x5b;
var CLOSE_BRACKET = 0x5d;
var QUOTE = 0x22;
var BACKSLASH = 0x5c;
var COMMA = 0x2c;
var OPEN = [OPEN_BRACE, OPEN_BRACKET];
var CLOSE = [CLOSE_BRACE, CLOSE_BRACKET];

function JSONSParse (opts) {
  if (!(this instanceof JSONSParse)) return new JSONSParse(opts);

  Transform.call(this, opts);
  this._writableState.objectMode = false;
  this._readableState.objectMode = true;

  this.buffer = new Buffer(0);
  this.depth = 0;
}

util.inherits(JSONSParse, Transform);


JSONSParse.prototype._transform = function(chunk, enc, cb) {
  this.buffer = Buffer.concat([this.buffer, chunk]);

  var offset = 0;
  for (var i = 0; i < this.buffer.length; i++) {
    var n = this.buffer[i];

    if (~OPEN.indexOf(n)) this.depth++;
    if (~CLOSE.indexOf(n)) this.depth--;

    // TODO: commas and brackets inside strings and escaped string delimiters

    if (this.depth === 1 && n === OPEN_BRACKET) {
      offset++;
      continue;
    }

    if (this.depth > 1) continue;
    if (n !== COMMA && n !== CLOSE_BRACKET) continue;

    try {
      var obj = JSON.parse(this.buffer.toString('utf8', offset, i));
      this.push(obj);
      offset = i + 1;
    } catch (err) {
      return cb(err);
    }
  }

  this.buffer = this.buffer.slice(offset);

  cb();
};

function JSONSStringify (opts) {
  if (!(this instanceof JSONSStringify)) return new JSONSStringify(opts);

  Transform.call(this, opts);
  this._writableState.objectMode = true;
  this._readableState.objectMode = false;

  this.open = '[\n';
  this.seperator = '\n,\n';
  this.close = '\n]\n';

  this.first = true;
  this.written = false;
}

util.inherits(JSONSStringify, Transform);

JSONSStringify.prototype._transform = function(obj, enc, cb) {
  this.written = true;

  if (this.first) this.push(this.open);
  else this.push(this.seperator);

  this.first = false;

  this.push(JSON.stringify(obj));
  cb();
};

JSONSStringify.prototype._flush = function(cb) {
  if (!this.written) this.push(this.open);
  this.push(this.close);
  cb();
};
